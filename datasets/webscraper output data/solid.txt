Solid is a specification that lets people store their data securely in decentralized data stores called Pods. Pods are like secure personal web servers for your data.

Any kind of information can be stored in a Solid Pod.

You control access to the data in your Pod. You decide what data to share and with whom (be it individuals, organizations, and/or applications). Furthermore, you can revoke access at any time.

To store and access data in your Pod, applications use standard, open, and interoperable data formats and protocols.











Developers













Users










Community



































        Solid: Your data, your choice.
        Advancing Web standards to empower individuals and groups.




















Solid is a 
               
              that lets individuals and groups store their data securely in 
              decentralized data stores called Pods. Pods are like secure 
              web servers for data. When data is stored in a Pod, its owners 
              control which people and applications can access it.
            











Your Pod: All your data, under your control

              
              Any kind of data can be stored in a Solid Pod, from structured
              data to regular files that you might store in a Google Drive
              or Dropbox folder. Individuals and groups can grant or 
              revoke access to any slice of their data as needed.
              
            






















              Fully interoperable standards
            

              All data in a Solid Pod is stored and accessed using standard, 
              open, and interoperable data formats and protocols. 
              Solid uses a common, shared way of describing things
              and their relationships to one another that
              different applications can understand. This gives
              Solid the unique ability to allow different applications to
              work with the same data.              
            











Share it safely

              Anyone or anything that accesses data in a Solid Pod uses a 
              unique ID, authenticated by a decentralized extension of OpenID 
              Connect. Solid's access control system uses these IDs to 
              determine whether a person, group, or application has access to a 
              resource in a Pod.
            













Solid creates interoperable ecosystems of
        applications and data

        Data stored in Solid Pods can power ecosystems of
        interoperable applications where individuals and groups are free to use their data 
        seamlessly across different applications and services.













          Leave your email address to get a bite-sized overview of everything Solid, delivered straight to your inbox once a month.
        

























































What's New




























More





































Developers













Users










Community











































Solid
Solid is a  that
lets people store their data securely in decentralized data stores
called Pods. Pods are like secure personal web servers for your data.


Any kind of information can be stored in a Solid Pod.


You control access to the data in your Pod. You decide what data to
share and with whom (be it individuals, organizations, and/or
applications). Furthermore, you can revoke access at any time.


To store and access data in your Pod, applications use standard,
open, and interoperable data formats and protocols.


Solid Servers and Pods
A Solid Server hosts one or more Solid Pods. Pods are where you store
your data:


Each Pod is fully controlled by the Pod owner (i.e., you).


Each Pods data and access rules are fully distinct from those of other Pods.



You can get a Pod from a , or you may choose to 
 your Pod.
You can even have multiple Pods. They can be hosted by the same Pod
Provider or by different Providers or be self-hosted or any combination
thereof. The number of Pods you have as well as which Solid Server or
Servers you use is effectively transparent to the applications and
services that you use. This is because, in the Solid ecosystem, data is
linked through your
 and not
through the specifics of your Pod. This is true for your own data as
well as for data that others have shared with you.
Data
You can store any kind of data in a Solid Pod.

What makes Solid special is the ability to store data in a way that
promotes interoperability. Specifically, Solid supports storing Linked Data.
Structuring data as Linked Data means that different applications can work
with the same data.
Access
With Solids 
 and 
 systems, 
you determine which people and applications can access your data. You grant or revoke access 
to any slice of your data as needed.  Consequently, you can do more with your data, 
because the applications you decide to use can be granted access to a wider and more diverse 
set of information.
And just as you can share your data with others, they can also share their data with you. 
This creates rich and collaborative experiences across a combination of
both personal and shared data.
Solid Applications
Solid applications store and access data in Pods using the
.
Within the interoperable Solid ecosystem, different applications can
access the same data instead of requiring separate data silos specifically for the
applications. For example, instead of inputting your email with your bank
statement notification service, with your phones billing service, etc., you can
instead store this information in your Pod and grant access to read your email information
to these disparate services/applications.
For developer resources, see . For a listing of 
some Solid applications, see .























































What's New




























More





































Developers













Users










Community














































Getting started as a Solid developer
To get started with Solid,
you will need a Solid Pod and a WebID. You can either use an existing Pod provider or run your own server.
Using an existing Pod provider
You can create aSolid Pod with an existing provider.
For a list of existing Pod providers, see .
Running your own server
The following open-source servers are available, if you want to run your own:

 for Node.js
 for Node.js
 as a plugin for Nextcloud
 for PHP
 for Rust

For instructions on:


Running the Community Solid Server, see .


Running the Node Solid Server, see .


Developing your first app
Once you are set up with your own Pod and WebID,
youre ready to develop your own app. Various Solid client libraries may provide a tutorial for beginners; for example, Inrupt offers the , and O.Team offers the .
Community assistance
Check out some of the existing applications. Some interesting approaches follow:

PodOS (Web Components) https://github.com/pod-os/PodOS
solid-uix (Native Web Components) https://github.com/SolidOS/solid-uix

Solid with web frameworks:

ember-solid   which should be start-to-finish Solid Ember App (Aad Versteden)
  a [solid/nextjs/ts] app (Arne Hassel)


You can also look into the Solid apps at:



Youtube videos:






























































What's New




























More





































Developers













Users










Community














































Solid Developer Tools & Libraries
There are a number of robust developer libraries to save you from re-inventing the wheel.  Everyone is invited to contribute new libraries and provide feedback on existing libraries - see .


 - a mock server that can be used for testing apps
 - a file manager for Solid pods
 - a tool that lets your write simply HTML/JavaScript to interact with a Solid Pod Session, Profile, Inbox, Chat
Session, Profile, Inbox, Chat
 - The operating system for Solid
 - The solid databrowser technology as a stand-alone electron app
 - a file manager for Solid pods
 - GUI front-end for Solid document management and syntax-highlighting pod editor
 - command line, interactive shell, and batch processor for Solid document management
 - Browse and manage things in a Solid pod


A typical Solid app will perform one or more of these functions using one of the associated libraries:

login & manage sessions ()
parse & query linked data  ()
manage documents and information flow ()
provide a user interface ()

Beginning developers may want to start with one of the interface libraries which provide pre-built components.  Advanced developers might want to look at  and/or participate in the .



 - check Web Access Control ACLs
 - login and session management
 -login and session management
 - nodejs login/sesseion for Pods & Solid access to local file systems, and other backends




 A library for making RDF querying easy
 A way to query Linked Data using GraphQL
 - A library for advanced manipulation of RDF
 -  A  extension adapting Solid to the engine
 - A library for easy manipulation of RDF

See also this  for a handy comparison between three commonly used linked data libraries.



 create, read, copy, upload & mange files & folders
 A collection of common RDF namespaces used in the Solid project
 - Solid access to non-Solid spaces such as file systems, browser IndexedDB, and Dropbox
 - Data and access management manipulation by Inrupt





 - HTML custom elements (aka web components) for read from and write to Solid pods.




 - SolidOS as a code stack for Solid which includes:
        
 - User Interface widgets and utilities for Solid
 - Solid-compatible data mashup library and Databrowser
 - A set of core solid-compatible apps based on solid-ui
 - Core business logic of SolidOS


 - SolidOS as a standalone desktop app (experimental)





 - A highly modular and flexible meta query engine for the Web
 - a collection of high-performance RDF libraries for JavaScript developers with a focus on usability
: for use with Web Cryptography API in Node.js




 - An implementation of RDFJS specifications




Perl

 - a Perl Solid-OIDC client with a command line tool and example app

Python

 - simple Hello World Flask app that can read private data from a Solid pod
 - a Python library for creating and managing files and folders in Solid pods
 - client authentication via Solid-OIDC
 - client authentication via client credentials

Rust

 - simple example of authenticated reads/writes to a Solid pod

Kotlin

 - simple example of Solid-OIDC using Spring and Kotlin

Swift

 - Authentication package for a Solid Pod

PHP

 - a PHP library for creating files and folders in Solid pods and implementing Solid OIDC, also contains a bundle for the  and  frameworks.

Related Tools

: Convert RDF from a syntax to another

: Dereference prefixes into their full domain name
: An ontology editor

Related libraries


Python





Java






PHP






If you have a new tool or library, or have suggested additions or changes for this page, please  or .




























































What's New




























More





































Developers













Users










Community











































Solid Apps
Showcase



Application
Description





Track your media and never miss a beat. - . GNU General Public License v3.0  2020 - . GNU General Public License v3.0  2020  - .



A general Pod Browser by 



File manager and IDE. -   



A Solid app that help you manages files in your Pod. -   



An IDE for editing Solid Pods by Jasmine Leonard.



Allows you to browse your Solid Pod offering multiple views of information including overview, graph, doc, gallery and grid as well as easy to use Solid collaboration control and file management. 30 day free trial followed by a $10 per user/per month.  2018 



Social



Application
Description





by 



Source code under MIT License Copyright  2019 by students of  course led by 



A react app to view and browse Solid WebID profiles. -  is under  by )



Add friends.  -  from 2018 by 



 



Identity and credentials document generator that creates X.509 certificates and saves WebID-Profile documents in any Solid Pod and sets up the relations required for WebID-TLS and WebID-TLS+Delegation.Copyright  2013-2023 



Lets you form social groups on a Solid Pod. Under  by .



Games



Application
Description





 under  



Movies



Application
Description





Track your media and never miss a beat. - . GNU General Public License v3.0  2020 - . GNU General Public License v3.0  2020  - .



A movie tracking and sharing application with personalised recommendations. -  by  ( Project).



Content, Notes, Blogging and Publishing



Application
Description





A simple note-taking app that stores notes in your Solid Pod. -  by 



An editor app for raw files using the vs interface. -  by .



Blogging platform. -   



A client side editor for decentralised article publishing, annotations, and social interactions. -   



A Solid app to view and edit your profile data. - 



A Solid app to manage your bookmarks. - 



Bookmarking app. -   2019 Vincent Tunru.



Bookmarks app with community sharing. 



Geolocation



Application
Description




(deployed as )
 2019. 







Other



Application
Description









Uses the  so it is currently only able to fetch weather in the United States.   2019. Dylan Martin.



Linked Data visualizations sharing and collaboration via Solid.  2020.    



  



Offline-first Recipes Manager   



Implements simple CRUD operations with the REST API and solid-file-client, writing to tasks. 



Chrome extension to extract structured data from any web page and store it to a Solid Pod. 



Pod Management



Application
Description





Tool to create and share resources with contacts



Your POds in the POCKet. A very modular SoLiD application that is based on webcomponents, vuejs, vue-bootstrap, using community libs like solid-file-client, ldflex-query, tripledoc switching. 



An app to manage your Pod. -  is under  by 



A Pod store. -   



A Solid app that help you manage files in your Pod. -   



RDF editor that can save content to any Solid Pod.  -  2019-2023 



A module of , ODS-Briefcase includes  support for Solid Pods, enabling read/write access for any WebDAV-compliant client, subject to Briefcase-managed ACLs. (Briefcase connects to the Pod as the Pod Owner, so has full privileges.)  -  2019-2023 



Extracts Metadata in a variety of notations from HTML docs and enables storage to any Solid Pod via Save As feature. -  2019-2023 



SPARQL Query Service Endpoint that supports WebID-OIDC for authenticating WebIDs en route to functionality that isnt granted to the un-authenticated Public; e.g., generating descriptions of any Web-Accessible Document in RDF, and publishing said description in 5-Star Linked Data form -  2019-2023 


 component for web app.
 is under  by 



Distills actions from API documentation constructed using RDF or OpenAPI; supports WebID-OIDC for authentication  2019-2023 



Widget authorisation. -  is under  by 



File manager and IDE. -   



Allows you to browse your Solid Pod offering multiple views of information including overview, graph, doc, gallery and grid as well as easy to use Solid collaboration control and file management. 30 day free trial followed by a $10 per user/per month. 2018 



LinkedPipes Applications create your own visualisers based on linked data. -   



A general Pod Browser by 



Browse and manage the things in your Pod. Based on .



Apps installed from Source



Application
Description





Processes notifications.   



A solid-based alternative to Doodle



For creating WebID accounts with Solid compatible providers. -   



Uses the national weather service API so it is currently only able to fetch weather in the United States.  2019. Dylan Martin.



A way to create, store, and query events using a users card. 2019. Dylan Martin.







 framework developed within the context of Solid.



A composable data browser aimed to provide a great user experience for Solid POD services, as well as other RDF sources, for both desktop and mobile web browsers.  and .



App inclusion and exclusion criteria
The criteria for an app to be Solid-compatible are:

If identifying users is necessary, they must be able to log in using their WebID and pointing to the Identity Provider of their choice
Data consumed by the app should be fetched from Solid Pods if possible
Data generated by the app should be stored in Solid Pods
The interaction between the app, pods, and Identity Provider(s) must be compliant with the Solid specification

Please note that apps falling into the following categories will not be listed on this page, even if they match the criteria above:

Apps intentionally or indirectly causing harm to anyone
Apps with a purpose that could be widely considered unethical
Apps designed to enable the generation and/or dissemination of hate speech
Apps encouraging stereotypes or violent behaviours towards any person or group
Apps having malicious intent, such as data theft
Apps designed to fulfill illegal purposes, such as drug traffic, stolen information exchange, extorsion
Apps sharing user information with any third-party without user consent
Apps that have been reported to have important technical or security issues that compromise its users Pods

Want to add an eligible Solid-compatible app to this list? Contact the Solid Manager via  or .
Disclaimer: The list above does not represent an endorsement by the Solid Project. The apps on the list do not undergo any testing at this time, and there is no guarantee of security or quality implied by their inclusion on this list. The goal of the list is to showcase the vibrancy of the Solid community and encourage early app builders to collaborate and learn from each other. If you believe one of the apps above is insecure or non-functional and should be removed from the list, please raise an issue  and tag the apps creator or maintainer. If the creator or maintainer of the app does not respond within 24 hours to indicate that they will fix the problem, a Solid Creator will remove the app from the listing.






























































What's New




























More





































Developers













Users










Community














































Get a Pod
Pods are where you store your data. Any kind of data can be stored in a Solid Pod. Once stored in a Pod, you control who can access your data.

You can get a Pod from a Pod Provider, or you may choose to self-host your Pod.
Get a Pod from a Pod Provider
When choosing a Pod Provider, some questions you may want to consider are:


Who is involved? The legal identity of the provider will be an important factor in how your data is handled. For example, some providers may engage with third parties to host the data. Mapping out clearly who is involved in what element of the provision is an important step in picking your Pod Provider.


Where are all the involved parties located, and where is the data physically stored? The geographical location of the legal entities involved and the physical location of the hosting is an important factor in determining which law govern the provider responsibilities. Depending on your nationality and degree of trust in various laws, you may prefer specific geographical locations.


What are the terms? Reading the Providers Terms is a good way to understand the implications of picking that provider.




     With Solid, you won't be tied to the provider you choose now. That is, you have the ability to move your data elsewhere if you want.
  

The following table lists some Pod Provider:



Provider
Responsible for Domain Name and Terms
Responsible for Hosting
Hosting Location
Solid Implementation







Germany






UK






France






USA






EU






France





, ,  or 
EU






Finland






France




If you are a provider who wants to add your service to this list, please create a pull request to update .
Self-host Your Pod
Self-hosting your own Pod (i.e., running your own ) provides the most control of your data. This way, you dont have to entrust any third party with your data.
Self-hosting requires some technical overhead and may not be suitable for everyone yet. In the future, we would like to make self-hosting a more user-friendly option. The great thing about Solid is the flexibility it offers: you can choose to get a Pod from a provider now, and move to self-hosting later.
Next Steps
When you get a Pod, you are also issued a unique WebID. Your WebID acts as your identity in the Solid ecosystem. For example, to share a picture in your Pod with someone, you would indicate the person by that persons WebID.
Once you have your Pod and WebID, you can check out some  to start storing data in your Pod.
You can even .























































What's New




























More





































Developers













Users










Community











































Stay up to date with events, learning resources, and recent developments.
Most Recent Issues






















        
          This Month in Solid
        
      


          Leave your email address to get a bite-sized overview of everything Solid, delivered straight to your inbox once a month.
        



















2021












2020
















2019



































































What's New




























More





































Developers













Users










Community









































Solid Events
Solid Events provide an opportunity to meet others who are working on Solid or are interested in Solid. Solid Events are run by people like you. If you are interested in coordinating a Solid Event near you, reach out to the Solid Manager at .


Interested in speaking at an upcoming Solid World? You can fill out the .


Have another Solid oriented event to share? Make a pull request to the .


2024 Events



Date
Event
Organiser
Recordings, Slides and Notes




2024-02-27

 / 
  Solid World was held around the theme of Solid for Social Benefit: Delivering Shared and Public Resources. We heard news from the Solid Team and presentations from the PASS Project, Open Commons, the SleepyBike Project, and Digital Flanders.


2024-05-02 - 2024-05-03
 (Leuven, Belgium)
 / 



2024-02-28
 (Ghent, Belgium)
 / 
This is an on-site event only, at .



2023 Events



Date
Event
Organiser
Recordings, Slides and Notes




2023-09-27


Aaron Coburn updated us on news from the W3Cs annual meeting. Jackson Morgan presented . Davi Ottenheimer presented on how Solid can enable responsible AI, and a team from Northeastern University presented on how predictive and generative AI can leverage Solid.


2023-06-28


Solid World was held at 11:00 a.m. EDT/1700 CEST. There was an update on CSS, an announcement of Inrupts Solid hackathon winners, and presentations from Graphmetrix and Motius. .


2023-05-31 - 2023-06-1


There will be a dedicated workshop/panel session about the Solid project at this conference, alongside interesting people and presentations from many like-minded projects. Location: Helsinki


2023-03-30 - 2023-03-31


The goal of the symposium is to provide a forum for researchers, early adopters from companies and public administration, and the community at large to discuss the current state of the art around Solid and exchange ideas for further developments.


2023-03-29


Ruben Verborgh updated us on the Solid W3C Working Group, and Melissa Wood of SolidMcr announced the creation of SolidUK. Esther de Loof of SolidLab Flanders presented the findings from their first annual . Oz Olivo presented Inrupts .


2023-02-21


 discussing the essential parts to make Solid apps, and with a presentation by Chase Hunt, a contributor to SolidOS, about getting involved in open source, and the opportunities to join and help grow the Solid ecosystem.



2022 Events



Date
Event
Organiser
Recordings, Slides and Notes




2022-12-08


Jun Zhao, Hunar Batra and Rui Zhao from Oxford University presented two Solid-based applications:  and . Jackson Morgan presented . We also heard about the formation of a Solid W3C Working Group.


2022-11-10


The BBC Research & Development team presented their new watch party product, .


2022-10-13


 Eliott Behar, a privacy and human rights attorney, Davi Ottenheimer, VP of Trust and Digital Ethics at Inrupt, and Michiel Fierens, doctoral researcher at SolidLab Flanders, participated in a panel discussion on Solid and New Data Regulations.


2022-10-06


Register 


2022-09-08


  previewed the launch of their Trinpod service at  and  Esther de Loof to us about  Melissa Wood told us about the latest 


2022-07-28


Right to Rent, Right to Work, Pre-Employment Screening, preventing modern slavery, DBS checks - CDD Services introduce two products requiring help to reach market. Sign up on 


2022-07-22

 / 
Muze hosts a meetup about Solid, Linked Data and Decentralized Web at MCH 2022, in Zeewolde, the Netherlands. There will be talks and workshops on three afternoons, starting at July 23th. If youve got something to show or tell, or just tell us that youre coming, please mail to .


2022-06-09


  Presentation:  Ruben Verborgh told us more about   Aaron Coburn told us about the 


2022-05-12


  Presentation:  Flanders Data Utility Company Team: Hear first-hand insight into how the Flemish Data Utility Company wants to stimulate citizens trust in sharing data, by focusing on responsible and secure data sharing. The Data Utility Companys Solid Pod platform is designed to establish trusted data ecosystems on this groundbreaking technology. The Data Utility Companys platform mitigates the costs and risks associated with innovative technology, lowering the threshold for organizations to enter the Solid ecosystem.


2022-05-09

 / 



2022-04-28

 / Mel W.



2022-04-14


  Presentation:   Philippe Duchesne, DataVillage & Luk Overmeire, VRT. DataVillage is developing a platform to perform confidential data processing on personal data, where end users can allow service providers to process their data to produce derived data, while having the guarantee that the original data will not be read by the service provider itself. DataVillage will be joined by VRT, the Flemish public broadcasting company, which is using the DataVillage platform to build a user-controlled content recommendation service for its audience.


2022-03-10


  Presentations:  Jasmine Leonard, Solid developer tool   Sebastien Rosset, , a new kind of architecture for web applications which aims to reconcile the ActivityPub and Solid standards


2022-02-10


  Presentations:  Gertjan de Mulder,   Pete Edwards,   All links from the meetup are shared on 


2022-01-13


  Presentations:  ,  Chair and Solid Editor, presented the recent milestone release of .  Ruben Verborgh, Professor of decentralized Web technology at Ghent University, presented .  All links from the meetup are shared on 



Earlier Events



Date
Event
Organiser
Recordings, Slides and Notes




2021-11-04


  Presentations:   SolidOS code home:   Justin Bingham gave updates on the growth of specifications in Solid and the Solid team.  Jeff Zucker explained the new Solid Glossary welcoming to newcomers. The glossary contains libraries, essential tools, documentation, and community topics.


2021-10-21


The Solid Editorial Team would like to increase communication with community members who are actively implementing Solid compliant server or client technologies. This session is open to the public, and we welcome everyone to attend this session. However, in an effort to maintain focus on the stated goals of the session, only individuals who are actively engaged in implementing Solid compliant server or client technologies will be queued to speak. To actively participate, an implementer must: 1. Be a member of the Solid Community Group 2. RSVP in advance to . Must be able to cite active implementation work. Legitimate citations include links to Github repositories, links to product descriptions on websites, or otherwise credible explanation of active work efforts. Implementers are encouraged to submit questions, issues, or topics in advance to . This may be included in the RSVP, or sent separately afterwards. Minutes will be recorded, and posted to https://github.com/solid/specification/tree/main/meetings.


2021-10-07


, Schedule a Solid Project Review: https://calendly.com/marrelle-bailey/website-research, Join , Tanis Presentation: , , Email: ; Ennos Presentation: , , , , , Contact Email: mailto:; Marias & Jans Presentation: , , , , , The PoC Project repo: , , , , 


2021-09-02


; Ruben Presentation Links: , , , , and ; Jacksons Presentation: 


2021-08-10


 was the hostess.Talks:  You Matter As You,  The BBC and Solid. CERN-Solid Proof of Concept.  Additional links: , , .


2021-08-05


 Also  by attendant Maria Dimou Rubens Update:  &  Oz Update:   ; ;   


2021-07-01





2021-06-21





2021-06-21


Solid over the Interplanetary File SystemFabrizio Parrillo (U. Basel, Switzerland), Christian F Tschudin (U. Basel, Switzerland)


2021-06-03


Also  by attendant Maria Dimou. Tims Flanders Press: ; :  and ; : 


2021-05-27





2021-05-07





2021-05-06


Also  by attendant Maria Dimou. Jackson Morgans links: , , , , ,  . Christian Buggedeis links: , .Aaron Coburns and Jack Lawsons links: , , .


2021-04-01


Also  by attendant Maria Dimou. Tims talk: .Ozs talk: .Graphmetrix talk: , .Nextcloud/PDS Interops talk: , , , , , , .Spoter.Mes talk: .


2021-03-22


 was the hostess.  gave us a short introduction to Solid,  talked about RDF. told us about SolidOS. presented on the authentication process in Solid.Recording for the first Women of Solid Meetup is . Additional links: , , , .


2021-03-04


. Also  by attendant Maria Dimou. Community Spotlights:  who created  and  for their .Ruben Verborgh gave an update on Community Solid Server (CSS) (mentioned links: ). Osmar Olivo asked for  on .  presented what theyre working on ().  Creafree ().


2021-02-04


. Also,  by attendant Maria Dimou. Tim Berners-Lees Update:  and . Ruben Verborghs update on Community Solid Server: .  Osmar Olivo update on Node.js support: .  Presentation: , , . Jasmine Leonards Presentation: , , , , . Hindia Mohammeds Presentation: 


2021-01-07


.  Resources from event: , , , , , .


2020-12-29





2020-12-03


. From Rubens presentation: the ,  with . From CERNs presentation: ,  and the . The . Digitas .


2020-11-05


.  by attendant Maria Dimou.


2020-10-01


.   by attendant Maria Dimou.


2020-09-03


 and slides: 


2020-08-06


 and slides: , .  by attendant Maria Dimou.


2020-07-02


 and 


2020-06-04





2020-05-07





2020-04-02





2020-03-05





2020-02-20


-


2020-02-19


 and 


2020-02-18





2020-02-10

Christian Buggedei



2020-01-30





2020-01-07





2019-12-10

Erwin Folmer



2019-11-20

Kartika Tulusan



2019-11-21
Solid Montreal




2019-10-26





2019-10-11

Sarmad Reda



2019-10-10
Solid Amsterdam




2019-09-12





2019-07-20
Solid Beijing




2019-07-05





2019-06-28

Bart Roorda



2019-06-12





2019-05-29





2019-05-22





2019-05-13





2019-05-08
Solid New York
Brian Cort



2019-05-02





2019-04-09





2019-04-09





2019-03-27





2019-03-22





2019-03-21





2019-02-20





2019-02-08
Solid Stockholm




2019-01-09
Solid Berlin




2018-12-12
Solid Oslo




2018-12-11
Solid Utrecht




2018-12-05





2016-04-11














































What's New




























More





































Developers













Users










Community











































Press
Are you looking to get a speaker or interview about Solid? Contact us on  with a description of what you are looking for.
Talks Mentioning Solid
2023




2023-02-04


From Zero to Hero with Solid - FOSDEM

By Noel De Martin







2021




2021-01-01




By Angelo Veltens







2020




2020-12-11




By Virginia Balseiro











2020-10-28




By Ruben Verborgh











2020-10-06




By Ruben Verborgh











2020-10-04




By Michiel de Jong












2020-06-24




By Tim Berners-Lee











2020-05-21




By Jeff Zucker












2020-03-30




By Ruben Verborgh












2020-02-27




By NoelDeMartin












2020-02-24




By Davi Ottenheimer











2020-02-19




By Alejandro Juan Garcia











2020-02-18




By NoelDeMartin












2020-02-07




By Maria Dimou, Sarven Capadisli, and Mitzi Lszl












2020-01-27




By Michiel de Jong











2020-01-11




By Jonas Smedegaard












2020-01-10




By Alice Poggioli







2019




2019-12-20




By Ruben Verborgh











2019-12-11




By Alejandro Juan Garca












2019-11-26


Nocturne Informatie Vlaanderen

By Ruben Verborgh











2019-11-18




By Tim Berners-Lee












2019-11-14




By Mitzi Lszl & Pieter van Everdingen











2019-10-25




By Sarven Capadisli 











2019-10-24




By Mitzi Lszl











2019-10-23




By Ruben Verborgh












2019-10-10




By Mitzi Lszl











2019-10-04




By Ruben Verborgh












2019-09-26




By Sarven Capadisli













2019-09-26




By Ruben Verborgh












2019-09-20




By Ruben Verborgh












2019-09-15




By Mitzi Lszl











2019-09-14




By Ruben Verborgh












2019-09-12




By Ruben Verborgh












2019-09-06




By Sarven Capadisli












2019-08-11


Die Rckeroberung des Social Web

By Angelo Veltens












2019-07-02




By Ruben Verborgh












2019-07-01




By Mitzi Lszl & Justin Bingham











2019-06-25


Postgress

By Tim Berners-Lee











2019-06-19




By Ruben Verborgh












2019-05-28




By Ruben Verborgh












2019-04-24




By Ruben Verborgh












2019-04-10




By Ruben Verborgh












2019-04-09




By Ruben Verborgh












2019-04-04


STRP Festival

By Ruben Verborgh











2019-03-28




By Juan Lupin












2019-03-28


Beyond Data Event 

By Ruben Verborgh











2019-03-10




By John Bruce, Justin Bingham












2019-03-06




By Tim Berners-Lee












2019-03-05




By Ruben Verborgh












2019-02-19




By Ruben Taelman












2019-02-07




By Mitzi Lszl











2019-02-03




By Ruben Verborgh













2019-01-17




By Ruben Verborgh








2018




2018-12-14




By Ruben Verborgh












2019-12-12




By Ruben Verborgh













2018-10-27




By Tim Berners-Lee












2018-10-08




By Tim Berners-Lee & Ruben Verborgh












2018-10-04




By AjayKumar












2018-09-19




By Ruben Verborgh












2018-11-14




By Ruben Verborgh












2018-09-13


Web Foundation Seminar 

By Ruben Verborgh











2018-09-06




By Ruben Verborgh













2018-08-23




By Ruben Verborgh












2018-08-02




By Ruben Verborgh













2018-06-05




By Ruben Verborgh












2018-05-28




By Tim Berners-Lee












2018-05-15




By Ruben Verborgh













2018-05-15




By Tim Berners-Lee












2018-04-14




By Ruben Verborgh













2018-04-28




By Tim Berners-Lee











2018-03-22




By Ruben Verborgh












2018-01-06




By Tim Berners-Lee








2017




2017-12-12




By Herbert van der Sompel









2016




2016-07-08




By Tim Berners-Lee












2016-04-12




By Andrei Sambra, Amy Guy, Sarven Capadisli, Nicola Greco











2016-04-07




By Andrei Sambra & Nicola Greco








2015




2015-10-18




By Andrei Sambra & Nicola Greco













2015-10-13




By Andrei Sambra












2015-09-25




By Andrei Sambra & Nicola Greco









Mentions of Solid in Articles
2023
2023-03 
2023-01-19 
2023-01-06 
2022
2022-11-26 
2022-11-21 
2022-11-08 
2021
2021-04-15 
2020
2020-07-28 
2020-07-12 
2020-07-01 
2020-06-12 
2020-06-02 
2020-06-02 
2020-05-20 
2020-05-06 
2020-04-29 
2020-04-15 
2020-04-14 
2020-04-07 
2020-04-04 
2020-04-01 
2020-03-30 
2020-03-29 
2020-03-27 
2020-02-25 
2020-02-24 

2020-02-24 
2020-02-24 
2020-02-24 
2020-02-24 
2020-02-21 
2020-02-18 
2020-02-17 
2020-02-14 
2020-02-13 
2020-02-13 
2020-02-13 
2020-02-12 
2020-02-12 
2020-02-05 
2020-02-05 
2020-01-23 
2020-01-22 
2020-01-20 
2020-01-18 
2020-01-16 
2020-01-05 
2019
2019-12-06 
2019-11-29 
2019-11-20 
2019-11-13 
2019-11-12 
2019-11-08 
2019-11-4 
2019-10-29 
2019-10-28 
2019-10-26 
2019-10-23 
2019-10-20 
2019-10-11 
2019-09-24 
2019-09-16 
2019-09-13 
2019-09-06 
2019-09-02 
2019-08-29 
2019-08-18 
2019-08-08 
2019-08-02 
2019-08-01 
2019-08-01 
2019-07-31 
2019-07-30 
2019-07-31 
2019-07-30 
2019-07-30 
2019-07-30 
2019-07-30 
2019-07-29 
2019-07-26 
2019-07-24 
2019-07-22 
2019-07-21 
2019-07-18 
2019-07-17 
2019-07-16 
2019-07-16 
2019-07-16 
2019-07-11 
2019-07-02 
2019-06-25 
2019-06-21 
2019-06-17 
2019-06-14 
2019-06-13 
2019-06-12 
2019-06-10 
2019-06-10 
2019-06-07 
2019-06-06 
2019-06-06 
2019-06-05 
2019-06-03 
2019-05-29 
2019-05-28 
2019-05-28 
2019-05-26 
2019-05-24 
2019-05-22 
2019-05-22 
2019-05-20 
2019-05-19 
2019-05-19 
2019-05-16 
2019-05-11 
2019-05-11 
2019-05-04 
2019-05-02 
2019-04-24 
2019-04-23 
2019-04-19 
2019-04-19 
2019-04-12 
2019-04-12 
2020-04-09 
2019-04-07 
2019-04-05 
2019-04-05 
2019-04-05 
2019-04-05 
2019-04-05 
2019-04-04 
2019-04-03 
2019-04-02 
2019-04-01 
2019-03-27 
2019-03-27 
2019-03-26 
201903-26 
2019-03-25 
2019-03-22 
2019-03-22 
2019-03-21 
2019-03-19 
2019-03-29 
2019-03-18 
2019-03-17 
2019-03-15 API Best in Class: What is Solid? Decentralized Web? Tim Berners-Lee is up to something again.
2019-03-14 
2019-03-14 
2019-03-14 
2019-03-14 
2019-03-14 
2019-03-13 
2019-03-12 
2019-03-12 
2019-03-12 
2019-03-12 
2019-03-12 
2019-03-12 
2019-03-12 
2019-03-11 
2019-03-11 
2019-03-10 
2019-03-06 
2019-03-05 
2019-03-05 
2019-03-05 
2019-03-05 
2019-03-05 
2019-03-05 
2019-03-05 
2019-03-01 
2019-02-26 
2019-03-30 
2019-02-05 
2019-02-14 
2019-02-15 
2019-02-20 
2019-02-20 
2019-02-21 
2019-02-22 
2019-02-22 
2019-02-27 
2019-02-28 
2019-01-29 
2019-01-29 
2019-01-29 
2019-01-26 
2019-01-25 
2019-01-21 
2019-01-19 
2019-01-10 
2019-01-09 
2019-01-19 
2019-01-08 
2019-01-06 
2019-01-04 
2019-01-03 
2019-01-03 
2018
2018-12-31 
2018-11-29 
2018-10-29 
2018-10-16 
2018-10-06 
2018-10-05 
2018-09-30 
2018-09-29 
2018-09-28 
2018-09-23 
2018-08-29 
2018-08-27 
2018-08-14 
2018-07-03 
2018-07-02 
2018-07-01 
2017
2017       
2016
2016-08-10 
2015
2015-11-02 
2009
2009-08-17 
2009-08-16 














































































What's New




























More




































Solid Protocol
Version 0.10.0, 2022-12-31

More details about this document

This version



Latest published version



Previous version



Editors draft



TimeMap



Editors






Published
2020-12-16


Modified
2022-12-31


Repository




Language
English


License



Document Status
Published


In Reply To



Policy


Rule

Unique Identifier

Target

Permission


Assigner

Action
































MIT License. Copyright  20192022 .


Abstract

This document connects a set of specifications that, together, provide applications with secure and permissioned access to externally stored data in an interoperable way.



Status of This Document

This section describes the status of this document at the time of its publication.
This document was published by the  as Version 0.10.0. The sections that have been incorporated have been reviewed following the . However, the information in this document is still subject to change. You are invited to  any feedback, comments, or questions you might have.
Publication as Version 0.10.0 does not imply endorsement by the W3C Membership. This document may be updated, replaced or obsoleted by other documents at any time. It is inappropriate to cite this document as other than work in progress.
This document was produced by a group operating under the . A human-readable  is available.



Table of Contents



















































































































Introduction

This section is non-normative.
The aims of the Solid project are in line with those of the Web itself: empowerment towards an equitable, informed and interconnected society. Solid adds to existing Web standards to realise a space where individuals can maintain their autonomy, control their data and privacy, and choose applications and services to fulfil their needs.
The Solid ecosystem encapsulates a set of specifications that are guided by the principles we have adopted and also the priority of our values. We acknowledge that every technical decision has ethical implications both for the end user (short-term) as well as society (long-term). To contribute towards a net positive social benefit, we use the  [] to orient ourselves. The consensus on the technical designs are informed by common use cases, implementation experience, and use.
An overarching design goal of the Solid ecosystem is to be evolvable and to provide fundamental affordances for decentralised Web applications for information exchange in a way that is secure and privacy respecting. In this environment, actors allocate identifiers for their content, shape and store data where they have access to, set access controls, and use preferred applications and services to achieve them.
The general architectural principles of Solid specifications are borrowed from the  []. The components as described in each specification may evolve independently  according to the principle of orthogonality in order to increase the flexibility and robustness of the Solid ecosystem. With that, the specifications are loosely coupled and indicate which features overlap with those governed by another specification. Extensibility as well as variability also are taken into account in each specification.
The specifications in the ecosystem describe how Solid servers and clients can be interoperable by using Web communication protocols, global identifiers, authentication and authorization mechanisms, data formats and shapes, and query interfaces.
The specifications are accompanied with supplemental documents, such as Primers and Best Practices and Guidelines to help implementers to form a well-rounded understanding of the Solid ecosystem as well as ways to improve their implementations.
This specification is for:

Resource server developers that want to enable clients to send and retrieve information;
Application developers that want to implement a client to perform operations on resources.


Terminology

This section is non-normative.
The Solid Protocol specification defines the following terms. These terms are referenced throughout this specification.


storage
A storage is a space of URIs that affords agents controlled access to resources.
Solid app
A Solid app is an application that reads or writes data from one or more .
URI
A Uniform Resource Identifier (URI) provides the means for identifying resources [].
resource
A resource is the target of an HTTP request identified by a URI [].
container resource
A container resource is a hierarchical collection of resources that contains other resources, including containers.
root container
A root container is a container resource that is at the highest level of the collection hierarchy.
resource metadata
Resource metadata encompasses data about resources described by means of RDF statements [].
agent
An agent is a person, social entity, or software identified by a URI; e.g., a WebID denotes an agent [].
owner
An owner is a person or a social entity that is considered to have the rights and responsibilities of a storage. An owner is identified by a URI, and implicitly has control over all resources in a storage. An owner is first set at storage provisioning time and can be changed.
origin
An origin indicates where an HTTP request originates from [].
read operation
A read operation entails that information about a resources existence or its description can be known. []
write operation
A write operation entails that information about resources can be created or removed. []
append operation
An append operation entails that information can be added but not removed. []




Namespaces


Prefixes and Namespaces


Prefix
Namespace
Description




rdf
http://www.w3.org/1999/02/22-rdf-syntax-ns#
[]


ldp
http://www.w3.org/ns/ldp#
[]


solid
http://www.w3.org/ns/solid/terms#
Solid Terms


pim
http://www.w3.org/ns/pim/space#
Workspace Ontology


acl
http://www.w3.org/ns/auth/acl#
ACL Ontology


dcterms
http://purl.org/dc/terms/
[]


stat
http://www.w3.org/ns/posix/stat
POSIX File Status






Conformance

This section describes the conformance model of the Solid Protocol.

Normative and Informative Content

All assertions, diagrams, examples, and notes are non-normative, as are all sections explicitly marked non-normative. Everything else is normative.
The key words MUST, MUST NOT, SHOULD, and MAY are to be interpreted as described in  [] [] when, and only when, they appear in all capitals, as shown here.
The key words strongly encouraged, strongly discouraged, encouraged", discouraged", can", cannot, could, could not, might, and might not are used for non-normative content.



Specification Category

The Solid Protocol identifies the following  to distinguish the types of conformance: API, notation/syntax, set of events, processor behaviour, protocol.



Classes of Products

The Solid Protocol identifies the following  for conforming implementations. These products are referenced throughout this specification.


Server
A  that builds on HTTP server [] and [] by defining media types, HTTP header fields, and the behaviour of resources, as identified by link relations.
Client
A  that builds on HTTP client [], [], and [] by defining behaviour in terms of fetching across the platform.




Interoperability

Interoperability of implementations for  and  is tested by evaluating an implementations ability to request and respond to HTTP messages that conform to this specification.







Hypertext Transfer Protocol

Solid  and  need to exchange data securely over the Internet, and they do so using the HTTP Web standard. This section describes in detail which parts of HTTP must be implemented by clients and servers.

HTTP Server

Servers MUST conform to HTTP/1.1 Message Syntax and Routing [] and HTTP/1.1 Semantics and Content []. Servers SHOULD conform to HTTP/2 [].
Servers SHOULD use TLS connections through the https URI scheme in order to secure the communication with clients. When both http and https URI schemes are supported, the server MUST redirect all http URIs to their https counterparts using a response with a 301 status code and a Location header.
Servers MUST conform to HTTP/1.1 Conditional Requests []. Servers SHOULD conform to HTTP/1.1 Caching []. Servers MAY conform to HTTP/1.1 Range Requests [].
Servers MUST conform to HTTP/1.1 Authentication []. When a client does not provide valid credentials when requesting a resource that requires it (see ), servers MUST send a response with a 401 status code (unless 404 is preferred for security reasons).
Server MUST reject PUT, POST and PATCH requests without the Content-Type header with a status code of 400. []



HTTP Client

Clients MUST conform to HTTP/1.1 Message Syntax and Routing [] and HTTP/1.1 Semantics and Content []. Clients MAY conform to HTTP/2 [].
Clients MAY conform to HTTP/1.1 Conditional Requests []. Clients MAY conform to HTTP/1.1 Caching []. Clients MAY conform to HTTP/1.1 Range Requests [].
Clients MUST conform to HTTP/1.1 Authentication [] if it needs to access resources requiring authentication (see ). When a client receives a response with a 403 or 404 status code, the client MAY repeat the request with different credentials.
Clients MUST use the Content-Type HTTP header in PUT, POST and PATCH requests []. []





Uniform Resource Identifier


Note: Storage Owner and URI Ownership

This specification does not describe the relationship between a storage owner and Web architectures  [].



URI Slash Semantics

The slash (/) character in the URI path indicates hierarchical relationship segments, and enables relative referencing []. The semantics of the slash character is shared by servers and clients. Paths ending with a slash denote a container resource. []
If two URIs differ only in the trailing slash, and the server has associated a resource with one of them, then the other URI MUST NOT correspond to another resource. Instead, the server MAY respond to requests for the latter URI with a 301 redirect to the former. []. Servers MUST authorize prior to this optional redirect. [].



URI Persistence

This section is non-normative.
Servers should not re-use URIs, regardless of the mechanism by which resources are created. Certain specific cases exist where URIs may be reinstated when it identifies the same resource, but only when consistent with Web architectures  []. []

Note: URI Reuse

Servers that wish to disable URI re-use may want to use the 410 status code.







Resources


Storage Resource

Servers MUST provide one or more . The storage resource (pim:Storage) is the root container for all of its contained resources (see ).
When a server supports multiple storages, the URIs MUST be allocated to non-overlapping space.
Servers MUST advertise the storage resource by including the HTTP Link header with rel="type" targeting http://www.w3.org/ns/pim/space#Storage when responding to storages request URI.
Clients can determine a resource is of type storage by making an HTTP HEAD or GET request on the target URL, and checking for the Link header with rel="type" targeting http://www.w3.org/ns/pim/space#Storage.
Clients can determine the storage of a resource by moving up the URI path hierarchy until the response includes a Link header with rel="type" targeting http://www.w3.org/ns/pim/space#Storage.
Clients can discover a storage by making an HTTP GET request on the target URL to retrieve an RDF representation [], whose encoded RDF graph contains a relation of type http://www.w3.org/ns/pim/space#storage. The object of the relation is the storage (pim:Storage).
[] []
Servers MUST include the Link header with rel="http://www.w3.org/ns/solid/terms#storageDescription" targeting the URI of the storage description resource in the response of HTTP GET, HEAD and OPTIONS requests targeting a resource in a storage.
Servers MUST include  as part of the storage description resource.
Storage description statements include the properties:

rdf:type
A class whose URI is http://www.w3.org/ns/pim/space#Storage.

[].
Servers MUST keep track of at least one  of a storage in an implementation defined way.
When a server wants to advertise the owner of a storage, the server MUST include the Link header with rel="http://www.w3.org/ns/solid/terms#owner" targeting the URI of the owner in the response of HTTP HEAD or GET requests targeting the root container.
[][][][]



Resource Containment

Solid has the notion of containers to represent a collection of linked resources to help with resource discovery and lifecycle management.
There is a 1-1 correspondence between containment triples and relative reference within the path name hierarchy. []. It follows that all resources are discoverable from a container and that it is not possible to create orphan resources. []
The representation and behaviour of containers in Solid corresponds to LDP Basic Container and MUST be supported by server. []
Servers can determine the value of the HTTP Last-Modified header field in response to HEAD and GET requests targeting a container based on changes to containment triples.

Note: Container Last-Modified Comparison

The Last-Modified of a container will not change when other parts of the container changes. This is to avoid instant propagation of changes all the way to the root container. As Last-Modified cannot be reliably used to check whether the container representation has changed in any way. In future versions of this specification, this design may be revisited.



Contained Resource Metadata

Container descriptions are not limited to containment triples. To further support client navigation and application interaction, servers can include  about contained resources as part of the container description, as described below.
Servers SHOULD include  as part of the container description, unless that information is inapplicable to the server.
Contained resource metadata statements include the properties:

rdf:type
A class whose URI is the expansion of the URI Template [] http://www.w3.org/ns/iana/media-types/{+iana-media-type}#Resource, where iana-media-type corresponds to a value from the IANA Media Types [].
stat:size
A non-negative integer giving the size of the resource in bytes.
dcterms:modified
The date and time when the resource was last modified.
stat:mtime
The Unix time when the resource was last modified.

The dcterms:modified value of a contained resource corresponds with the Last-Modified header value of the contained resource. If one were to perform HEAD or GET requests on the URI of the contained resource at the time of the HTTP messages generation, then a response with the 200 status code including the Last-Modified header would indicate the same date and time.

Note: Contained Resource Metadata Considerations

The generation of contained resource metadata may be inapplicable to some servers, for example, when that information does not exist or is expensive to determine.


Contained resource metadata is .
[]
                      [] []





Auxiliary Resources

Solid has the notion of auxiliary resources to provide supplementary information such as descriptive metadata, authorization conditions, data shape constraints, digital rights or provenance record about a given resource (hereafter referred as the subject resource), and affects how resources and others associated with it are processed, served or interpreted.
Servers MUST support auxiliary resources defined by this specification and manage the association between a subject resource and auxiliary resources. When a subject resource is deleted its auxiliary resources are also deleted by the server ().
Auxiliary resources are represented as RDF documents []. HTTP interactions on auxiliary resources are subject to the requirements as per .

Note: Self-describing Resources

Where applicable, to promote , implementations and authors are encouraged to use the subject resource instead of the associated auxiliary resource.



Note: URI Origin

The resource and the associated auxiliary resource can be on different origins [].


This specification defines the following types of auxiliary resources:




Servers MUST advertise auxiliary resources associated with a subject resource by responding to HEAD and GET requests by including the HTTP Link header with the rel parameter [].
Clients can discover auxiliary resources associated with a subject resource by making an HTTP HEAD or GET request on the target URL, and checking the HTTP Link header with the rel parameter [].



Auxiliary Type
Link Relation
Definitions





acl
[]



describedby
[]




Web Access Control

An auxiliary resource of type Web Access Control provides access control description of a subject resource ().



Description Resource

An auxiliary resource of type Description Resource provides a description of a subject resource.
Servers MUST NOT directly associate more than one description resource to a subject resource.
When an HTTP request targets a description resource, the server MUST apply the authorization rule that is used for the subject resource with which the description resource is associated.
Clients can discover resources that are described by description resources by making an HTTP HEAD or GET request on the target URL, and checking the HTTP Link header with a rel value of describes (inverse of the describedby relation) [].







Reading and Writing Resources

Servers MUST respond with the 405 status code to requests using HTTP methods that are not supported by the target resource. []

Resource Type Heuristics

When creating new resources, servers can determine an effective request URIs type by examining the URI path ending ().
When a successful PUT or PATCH request creates a resource, the server MUST use the effective request URI to assign the URI to that resource.
When a successful POST request creates a resource, the server MUST assign a URI to that resource. Servers MAY allow clients to suggest the URI of a resource created through POST, using the HTTP Slug header as defined in [].

Note: URI Allocation

Clients can use PUT and PATCH requests to assign a URI to a resource. Clients can use POST requests to have the server assign a URI to a resource.


[][].



Reading Resources

Servers MUST support the HTTP GET, HEAD and OPTIONS methods [] for clients to read resources or to determine communication options. []
Servers MUST indicate the HTTP methods supported by the target resource by generating an Allow header field in successful responses.
When responding to authorized requests, servers MUST indicate supported media types in the HTTP Accept-Patch [], Accept-Post [] and Accept-Put [] response headers that correspond to acceptable HTTP methods listed in Allow header value in response to HTTP GET, HEAD and OPTIONS requests.
[] [] []



Writing Resources

Servers MUST support the HTTP PUT, POST and PATCH methods []. [] []
Servers MUST create intermediate containers and include corresponding containment triples in container representations derived from the URI path component of PUT and PATCH requests. []
Servers MUST allow creating new resources with a POST request to URI path ending /. Servers MUST create a resource with URI path ending /{id} in container /. Servers MUST create a container with URI path ending /{id}/ in container / for requests including the HTTP Link header with rel="type" targeting a valid LDP container type. [] []
When a POST method request targets a resource without an existing representation, the server MUST respond with the 404 status code. []
When a PUT or PATCH method request targets an auxiliary resource, the server MUST create or update it. When a POST method request with the Slug header targets an auxiliary resource, the server MUST respond with the 403 status code and response body describing the error. []
Servers MUST NOT allow HTTP PUT or PATCH on a container to update its containment triples; if the server receives such a request, it MUST respond with a 409 status code. []
Servers MUST NOT allow HTTP POST, PUT and PATCH to update a containers ; if the server receives such a request, it MUST respond with a 409 status code. []

Note: Conditional Update

Clients are encouraged to use the HTTP If-None-Match header with a value of "*" to prevent an unsafe request method, e.g., PUT, PATCH, from inadvertently modifying an existing representation of the target resource when the client believes that the resource does not have a current representation. [] [] []


Servers MAY use the HTTP ETag header with a strong validator for RDF bearing representations in order to encourage clients to opt-in to using the If-Match header in their requests.


Modifying Resources Using N3 Patches

Servers MUST accept a PATCH request with an N3 Patch body when the target of the request is an RDF document []. Servers MUST indicate support of N3 Patch by listing text/n3 as a value of the Accept-Patch header [] of relevant responses. []
An N3 Patch is a document in the Notation3 (N3) format [], identified by the media type text/n3, conforming to the following constraints:

A patch document MUST contain one or more patch resources.
A patch resource MUST be identified by a URI or blank node, which we refer to as ?patch in the remainder of this section.
A patch resource MAY contain a triple [] ?patch rdf:type solid:Patch.
A patch resource MUST contain at most one triple of the form ?patch solid:deletes ?deletions.
A patch resource MUST contain at most one triple of the form ?patch solid:inserts ?insertions.
A patch resource MUST contain at most one triple of the form ?patch solid:where ?conditions.
When present, ?deletions, ?insertions, and ?conditions MUST be non-nested cited formulae [] consisting only of triples and/or triple patterns []. When not present, they are presumed to be the empty formula {}.

While other specifications might provide a structure and interpretation for a wider class of N3 Patch documents, the present specification only governs the application of N3 Patch documents that additionally adhere to the following constraints:

The patch document MUST contain exactly one patch resource, identified by one or more of the triple patterns described above, which all share the same ?patch subject.
A patch resource MUST contain a triple ?patch rdf:type solid:InsertDeletePatch.
The ?insertions and ?deletions formulae MUST NOT contain variables that do not occur in the ?conditions formula.
The ?insertions and ?deletions formulae MUST NOT contain blank nodes.

Servers MUST respond with a 422 status code [] if a patch document does not satisfy all of the above constraints.
When ?conditions is non-empty, servers MUST treat the request as a . When ?insertions is non-empty, servers MUST (also) treat the request as an . When ?deletions is non-empty, servers MUST treat the request as a  and .
Servers MUST process a patch resource against the target document as follows:

Start from the RDF dataset in the target document, or an empty RDF dataset if the target resource does not exist yet.
If ?conditions is non-empty, find all (possibly empty) variable mappings such that all of the resulting triples occur in the dataset.
If no such mapping exists, or if multiple mappings exist, the server MUST respond with a 409 status code. []
The resulting variable mapping is propagated to the ?deletions and ?insertions formulae to obtain two sets of resulting triples.
If the set of triples resulting from ?deletions is non-empty and the dataset does not contain all of these triples, the server MUST respond with a 409 status code. []
The triples resulting from ?deletions are to be removed from the RDF dataset.
The triples resulting from ?insertions are to be added to the RDF dataset, with each blank node from ?insertions resulting in a newly created blank node.
The combination of deletions followed by insertions then forms the new resource state of the RDF document, and the server responds with the appropriate status code.



Example: Applying an N3 patch.
@prefix solid: <http://www.w3.org/ns/solid/terms#>.
@prefix ex: <http://www.example.org/terms#>.

_:rename a solid:InsertDeletePatch;
  solid:where   { ?person ex:familyName "Garcia". };
  solid:inserts { ?person ex:givenName "Alex". };
  solid:deletes { ?person ex:givenName "Claudia". }.
This N3 Patch instructs to rename Claudia Garcia into Alex Garcia, on the condition that no other Garcia family members are present in the target RDF document.




Deleting Resources

Servers MUST support the HTTP DELETE method []. [] []
When a DELETE request targets storages root container or its associated ACL resource, the server MUST respond with the 405 status code. Server MUST exclude the DELETE method in the HTTP response header Allow in response to requests to these resources []. []
When a contained resource is deleted, the server MUST also remove the corresponding containment triple. []
When a contained resource is deleted, the server MUST also delete the associated auxiliary resources (see the  section).
When a DELETE request targets a container, the server MUST delete the container if it contains no resources. If the container contains resources, the server MUST respond with the 409 status code and response body describing the error. []
This section is non-normative.
The server might perform additional actions, as described in the normative references like []. For example, the server could perform additional cleanup tasks for resources it knows are no longer referenced or have not been accessed for some period of time, and so on.
Subsequent GET requests to the deleted resource usually result in a 404 or 410 status code, although HTTP allows others. [] []



Resource Representations

When a server creates a resource on HTTP PUT, POST or PATCH requests such that the requests representation data encodes an RDF document [] (as determined by the Content-Type header), the server MUST accept GET requests on this resource when the value of the Accept header requests a representation in text/turtle or application/ld+json [] []. [] ] [] []
When a PUT, POST, PATCH or DELETE method request targets a representation URL that is different than the resource URL, the server MUST respond with a 307 or 308 status code and Location header specifying the preferred URI reference. []



Constraints and Problem Details

This section is non-normative.
Servers are encouraged to publish any constraints on clients ability to create or update resources by adding a Link header with an appropriate context URI, a link relation of http://www.w3.org/ns/ldp#constrainedBy, and a target URI identifying a set of constraints [], to responses to requests that fail due to violation of those constraints. The same Link header can be provided in other responses.
Servers are encouraged to use the URIs of the constraints that are defined by specifications or other constraint URIs within its authority depending on the request's semantics on a target resource.
Constraints are intended to be protected and persistent resources and therefore cannot be modified by clients. To facilitate better client interactions, it is encouraged to express constraints in RDF.
[]





Linked Data Notifications

A Solid server MUST conform to the LDN specification by implementing the Receiver parts to receive notifications and make Inbox contents available [].
A Solid client MUST conform to the LDN specification by implementing the Sender or Consumer parts to discover the location of a resources Inbox, and to send notifications to an Inbox or to retrieve the contents of an Inbox [].



Live Update


Solid Notifications Protocol

Entities in a Solid ecosystem use the  to communicate about changes affecting a resource.
Servers MUST conform to the  [] by implementing the  to enable clients to discover subscription resources and notification channels available to a given resource or storage.
Servers MUST conform to the  [] by implementing the  to process and produce instructions for subscription requests.
Servers MUST conform to the  [] by implementing the  to produce and send messages to a .
Servers MUST conform to the  [] by implementing the  to receive and process messages that conform to a notification channel type.
The following is non-normative.
The Solid WebSockets API (Unofficial Draft) [] has been the common notification protocol for many years. That draft does not include an authentication mechanism, and therefore this Protocol has transitioned to require the .
Existing client and server implementations should begin providing support for the new notification protocol while supporting backwards compatibility, as appropriate.





Cross-Origin Resource Sharing

 typically access data from multiple sources. However, Web browsers by default prevent apps that run on one origin from accessing data on other origins. This cross-origin protection is a security mechanism that ensures malicious websites cannot simply read your profile or banking details from other websites. However, this reasonable default poses a problem even for benevolent Solid apps, which might have good reasons to access data from different places. For instance, a Solid app at https://app.example/ would be prevented from accessing data on https://guinan.example/ or https://darmok.example/, even when Guinan and Darmok have given the user of the app their permission to see some of their data.
For cases where the other origins have their own access protection mechanism    the browsers built-in cross-origin protection is actually an obstacle rather than a feature. After all, storages already ensure through access control that certain documents can only be accessed by specific people or applications. Preventively blocking apps from different origins thus introduces an unnecessary barrier.
Fortunately, Web servers can indicate to the browser that certain documents do not require cross-origin protection. This mechanism to selectively disable that protection is called Cross-Origin Resource Sharing or CORS []. By responding to browser requests with a specific combination of HTTP headers, servers can indicate which actions are allowed for a given resource. For Solid, the goal is to allow all actions on the CORS level, such that the deeper  layer can exert full control over the apps allowed permissions. The next section describes how to achieve this through the right HTTP header configuration.

CORS Server

A server MUST implement the CORS protocol [] such that, to the extent possible, the browser allows Solid apps to send any request and combination of request headers to the server, and the Solid app can read any response and response headers received from the server. If the server wishes to block access to a resource, this MUST NOT happen via CORS but MUST instead be communicated to the Solid app in the browser through HTTP status codes such as 401, 403, or 404 [].

Note: CORS Protocol Blocking

Since the CORS protocol is part of a Living Standard, it might be changed at any point, which might necessitate changes to server implementations for continued prevention of undesired blocking. A  to mitigate this has been suggested.


Concretely, whenever a server receives an HTTP request containing a valid Origin header [], the server MUST respond with the appropriate Access-Control-* headers as specified in the CORS protocol []. In particular, the server MUST set the Access-Control-Allow-Origin header to the valid Origin value from the request and list Origin in the Vary header value. The server MUST make all used response headers readable for the Solid app through Access-Control-Expose-Headers (with the possible exception of the Access-Control-* headers themselves). A server MUST also support the HTTP OPTIONS method [] such that it can respond appropriately to CORS preflight requests.
Careful attention is warranted, especially because of the many edge cases. For instance, servers SHOULD explicitly enumerate all used response headers under Access-Control-Expose-Headers rather than resorting to *, which does not cover all cases (such as credentials mode set to include). Servers SHOULD also explicitly list Accept under Access-Control-Allow-Headers, because values longer than 128 characters (not uncommon for RDF-based Solid apps) would otherwise be blocked, despite shorter Accept headers being allowed without explicit mention.





Identity


WebID

A WebID is an HTTP URI denoting an agent, for example a person, organisation, or software []. When a WebID is dereferenced, server provides a representation of the WebID Profile in an RDF document [] which uniquely describes an agent denoted by a WebID. WebIDs are an underpinning component in the Solid ecosystem and are used as the primary identifier for users and applications.





Authentication


Solid-OIDC

The Solid OpenID Connect (Solid OIDC) specification defines how resource servers verify the identity of relying parties and end users based on the authentication performed by an OpenID provider [].



WebID-TLS

This section is non-normative.
The Solid ecosystem initially relied on WebID-TLS for authenticated resource access . The current recommendation for authentication relies on Solid-OIDC (). Implementations can use WebID-TLS just as any other mechanism as an additional authentication method.





Authorization

Servers MUST conform to either or both Web Access Control [] and Access Control Policy [] specifications.

Web Access Control

Web Access Control (WAC) is a decentralized cross-domain access control system providing a way for Linked Data systems to set authorization conditions on HTTP resources using the Access Control List (ACL) model. Server manages the association between a resource and an ACL resource with the , and applies the authorization conditions on requested operations. Authorizations are described using the  to express and determine access privileges of a requested resource. Applications can discover authorization rules associated with a given resource, and to control such rules, as directed by an agent.
Clients MUST conform to the Web Access Control specification [].
[] [] ] ]



Access Control Policy

Access Control Policy (ACP) is a language for describing, controlling, and granting access to resources. Authorizations are described using the  to express and determine access privileges of a requested resource.
Clients MUST conform to the Access Control Policy specification [].
[]





HTTP Definitions


HTTP Headers


The Accept-Put Response Header

This specification introduces a new HTTP response header Accept-Put used to specify the document formats accepted by the server on HTTP PUT requests. It is modelled after the Accept-Patch header defined in [] and the Accept-Post header defined in [].
The syntax for Accept-Put, using the ABNF syntax defined in Section 1.2 of [], is:
Accept-Put = "Accept-Put" ":" # media-range
The Accept-Put header specifies a comma-separated list of media ranges (with optional parameters) as defined by [], Section 5.3.2. The Accept-Put header, in effect, uses the same syntax as the HTTP Accept header minus the optional accept-params BNF production, since the latter does not apply to Accept-Put.
The presence of the Accept-Put header in response to any method is an implicit indication that PUT is allowed on the resource identified by the request URI. The presence of a specific document format in this header indicates that that specific format is allowed on PUT requests to the resource identified by the request URI.
IANA Registration Template:
The Accept-Put response header must be added to the permanent registry (see []).

Header field name
Accept-Put
Applicable Protocol
HTTP
Author/Change controller
W3C Solid Community Group
Specification document
This specification








Considerations

This section details security, privacy, accessibility and internationalization considerations.
Some of the normative references with this specification point to documents with a Living Standard or Draft status, meaning their contents can still change over time. It is advised to monitor these documents, as such changes might have implications.

Security Considerations

This section is non-normative.
While this section attempts to highlight a set of security considerations, it is not a complete list. Implementers are urged to seek the advice of security professionals when implementing mission critical systems using the technology outlined in this specification.
Implementations are subject to the same security considerations that are found in HTTP/1.1 [] and [].
Servers are strongly discouraged from assuming that HTTP request headers field-values are valid or non-malicious. Servers are strongly encouraged to sanitize requests before processing them or incorporating them in messages sent to others. Servers are encouraged to reject bad requests that conflict with this specification's normative requirements. Servers are encouraged to restrict untrusted requests. Servers are encouraged to apply normalization and canonicalization algorithms where applicable. Servers are encouraged to take measures to mitigate potential timing attacks attempting to discover resource existence even if requesting agent has no access to the resource(s). Servers are strongly discouraged from exposing information beyond the minimum amount necessary to enable a feature.
Servers are strongly discouraged from assuming that the user agent is a regular Web browser, even when requests contain familiar values in headers such as User-Agent or Origin. Such an assumption could lead to incorrect conclusions about the security model of the application making the request, since the request might actually come from a non-browser actor unaffected by browser security constraints.
Servers  in browsers because resource access is governed explicitly by the  component. As such, servers cannot rely on browser-based cross-origin protection mechanisms for determining the authentication status or representation of a resource. In particular, servers are strongly encouraged to ignore HTTP cookies from untrusted origins. Additional security measures can be taken to prevent metadata in error responses from leaking. For instance, a malicious application could probe multiple servers to check whether the response status code is 401 or 403, or could try to access an error page from an intranet server within the user agents private network to extract company names or other data. To mitigate this, when a request from an untrusted Origin arrives, the server may want to set the status code of error responses to 404 and/or anonymize or censor their contents.
Servers are encouraged to use TLS connections to protect the contents of requests and responses from eavesdropping and modification by third parties. Unsecured TCP connections without TLS may be used in testing environments or when the server is behind a reverse proxy that terminates a secure connection.



Privacy Considerations

This section is non-normative.
Privacy is one of the ethical values that underpin the web. To empower people with needs to have strong privacy protections with respect to information flows, implementers as well as developers of specifications in the Solid ecosystem are encouraged to consider privacy-related design choices as per W3C  [].
Servers are encouraged to use authorization techniques to prevent unwanted access to resources, rather than depending on the relative obscurity of their resource names.

Identifiable Information

In order to prevent leakage of non-resource data, servers are strongly discouraged from including identifiable information in error responses.





Accessibility Considerations

This section is non-normative.
We acknowledge the diversity of people using the Web, anyone that may create or use information. Our aim is to have inclusive designs for wide range of people and their abilities. This section details general accessibility considerations to take into account for Web content accessibility, accessible applications, authoring tools, and accessible user agents that uses this specification.
Web Content Accessibility: As with implementation of any Web standard or protocol, ignoring accessibility issues makes information unusable by a large subset of the population. It is strongly encouraged to follow accessibility guidelines and standards, such as the  [] to cover an array of recommendations to make content accessible to a wider range of people regardless of any disability, limitation, or sensitivity. It is also strongly encouraged to follow the guidance of  [].
Accessible Applications: To help assistive technologies to provide a consistent user interface and understanding of the objects, it is strongly encouraged to follow the  [] recommendations. To enable semantic navigation, styling and interactive features in context of digital publishing, it is encouraged to follow the  []. To support structured graphics such as charts, graphs, technical drawings and scientific diagrams, to assistive technologies in order improve accessibility of graphics or diagrams through detailed annotations, it is encouraged to follow the  [].
Authoring Tool Accessibility: To contribute to the proliferation of Web content that is accessible to a broad range of people, it is strongly encouraged to follow the  [] in the design of authoring tools to support the production of accessible content through accessible user interfaces.
User Agent Accessibility Guidelines: To support the general principles for the development of accessible user agents, i.e., any software that retrieves, renders and facilitates end-user interaction with web content, it is strongly encouraged to follow the  [].



Internationalization Considerations

This section is non-normative.
Adaptability of content and software to the needs of target audiences helps towards accessibility. The mechanisms to cater information and interfaces so that people from any culture, region, or language preference can participate better. Towards this end, it is strongly encouraged to apply the recommendations and best practices of W3C . For example, content authors can:

include links to navigate to different languages of the content;
declare the base language of a document, indicate multiple languages and their directional flow  to help with translations;
use Unicode character encoding, e.g., UTF-8, in data forms and text to ensure correct effects;
check and minimise inappropriate cultural bias, and improve translatability;
restrict markup use to structure and semantics.




Security and Privacy Review

This section is non-normative.
These questions provide an overview of security and privacy considerations for this specification as guided by [].


There are no known security impacts of the features in this specification.

Yes.

Access to a resource is only granted to authorized agents. HTTP request payloads can contain any data including that which identifies or refers to the user of the application.  to any personal data that applications include is extended by the client to the server.

The features do not require obtaining or exposing sensitive information.

No.

No.

No. Resources are described within the framework of HTTP, where some kinds of resources are required to be RDF documents. Servers might be able to redirect to other resources, e.g., the https: URLs to file:, data:, or blob: URLs, but no behaviour is defined by this specification.

No.

No detail about another origins state is exposed. As the association between a resource and its auxiliary resource is at the discretion of the server, they can be on different origins (). When a server participates in the  [], HTTP requests from different origins may be allowed. This feature does not add any new attack surface above and beyond normal , so no extra mitigation is deemed necessary.

No.

No.

No.

None.

Inapplicable.

No different than browsers 'normal' state.

Yes, in  and .

No.

Inapplicable.




Societal Impact Review

This section is non-normative.
These questions provide an overview of ethical considerations and societal impact as guided by [].


..

..

..

..

..

..

..

..

..

..

Yes, in  and .






Change Log

This section is non-normative.
The summary of editorial and substantive changes in this section are based on W3C Process Document  [].
  

Changes from protocol-20211217 to this version


Amend language, document details, and markup.
Add .
Update .
Change requirement for server including Accept-* headers in  to .
Add requirements for server  and .
Constrain server requirement for  to successful responses.
Update current copyright year.
Add advisement for .
Add requirements for storage description: , , .
Add requirement for .
Remove the term data pod and add definition of .
Add .
Add consideration for restricting untrusted requests.
Update  to add , , , .
Update .
Add requirements for .






References


Normative References


[ACP]
.  Matthieu Bosquet.  W3C Solid Community Group. 18 May 2022. Version 0.9.0. URL: 
[DC-TERMS]
. DCMI Usage Board.  DCMI. 11 October 2010. DCMI Recommendation. URL: 
[FETCH]
. Anne van Kesteren.  WHATWG. Living Standard. URL: 
[IANA-MEDIA-TYPES]
.  IANA. URL: 
[JSON-LD11]
. Gregg Kellogg; Pierre-Antoine Champin; Dave Longley.  W3C. 16 July 2020. W3C Recommendation. URL: 
[LDN]
. Sarven Capadisli; Amy Guy.  W3C. 2 May 2017. W3C Recommendation. URL: 
[LDP]
. Steve Speicher; John Arwe; Ashok Malhotra.  W3C. 26 February 2015. W3C Recommendation. URL: 
[N3]
. Drthe Arndt; William Van Woensel;Dominik Tomaszuk; Gregg Kellogg.  W3C. 5 September 2021. Draft Community Group Report. URL: 
[POWDER-DR]
. Phil Archer; Kevin Smith; Andrea Perego.  W3C. 1 September 2009. W3C Recommendation. URL: 
[RDF-SCHEMA]
. Dan Brickley; Ramanathan Guha.  W3C. 25 February 2014. W3C Recommendation. URL: 
[RDF11-CONCEPTS]
. Richard Cyganiak; David Wood; Markus Lanthaler.  W3C. 25 February 2014. W3C Recommendation. URL: 
[RFC2119]
. S. Bradner.  IETF. March 1997. Best Current Practice. URL: 
[RFC3864]
. G. Klyne; M. Nottingham; J. Mogul.  IETF. September 2004. Best Current Practice. URL: 
[RFC3986]
. T. Berners-Lee; R. Fielding; L. Masinter.  IETF. January 2005. Internet Standard. URL: 
[RFC4918]
. L. Dusseault, Ed.  IETF. June 2007. Proposed Standard. URL: 
[RFC5023]
. J. Gregorio, Ed.; B. de hOra, Ed..  IETF. October 2007. Proposed Standard. URL: 
[RFC5789]
. L. Dusseault; J. Snell.  IETF. March 2010. Proposed Standard. URL: 
[RFC6454]
. A. Barth.  IETF. December 2011. Proposed Standard. URL: 
[RFC6455]
. I. Fette; A. Melnikov.  IETF. December 2011. Proposed Standard. URL: 
[RFC6570]. J. Gregorio; R. Fielding; M. Hadley; M. Nottingham; D. Orchard.  IETF. March 2012. Proposed Standard. URL: 
[RFC6892]
. E. Wilde.  IETF. March 2013. Informational. URL: 
[RFC7230]
. R. Fielding, Ed.; J. Reschke, Ed..  IETF. June 2014. Proposed Standard. URL: 
[RFC7231]
. R. Fielding, Ed.; J. Reschke, Ed..  IETF. June 2014. Proposed Standard. URL: 
[RFC7232]
. R. Fielding, Ed.; J. Reschke, Ed..  IETF. June 2014. Proposed Standard. URL: 
[RFC7233]
. R. Fielding, Ed.; Y. Lafon, Ed.; J. Reschke, Ed..  IETF. June 2014. Proposed Standard. URL: 
[RFC7234]
. R. Fielding, Ed.; M. Nottingham, Ed.; J. Reschke, Ed..  IETF. June 2014. Proposed Standard. URL: 
[RFC7235]
. R. Fielding, Ed.; J. Reschke, Ed..  IETF. June 2014. Proposed Standard. URL: 
[RFC7540]
. M. Belshe; R. Peon; M. Thomson, Ed..  IETF. May 2015. Proposed Standard. URL: 
[RFC8174]
. B. Leiba.  IETF. May 2017. Best Current Practice. URL: 
[RFC8288]
. M. Nottingham.  IETF. October 2017. Proposed Standard. URL: 
[SOLID-NOTIFICATIONS-PROTOCOL]
. Sarven Capadisli.  W3C Solid Community Group. 31 December 2022. Version 0.2.0. URL: 
[SOLID-OIDC]
. Aaron Coburn; elf Pavlik; Dmitri Zagidulin.  W3C Solid Community Group. 28 March 2022. Version 0.1.0. URL: 
[SPARQL11-QUERY]
. Steve Harris; Andy Seaborne; Eric Prud'hommeaux.  W3C. 21 March 2013. W3C Recommendation. URL: 
[Turtle]
. Eric Prud'hommeaux; Gavin Carothers.  W3C. 25 February 2014. W3C Recommendation. URL: 
[W3C-HTML]
.  W3C. 28 January 2021. W3C Recommendation. URL: 
[WAC]
.  Sarven Capadisli.  W3C Solid Community Group. 5 July 2022. Version 1.0.0-cr-1. URL: 
[WEBARCH]
. Ian Jacobs; Norman Walsh.  W3C. 15 December 2004. W3C Recommendation. URL: 
[WEBID]
. Andrei Sambra; Stphane Corlosquet.  W3C WebID Community Group. 5 March 2014. W3C Editors Draft. URL: 




Informative References


[ATAG20]
. Jan Richards; Jeanne F Spellman; Jutta Treviranus.  W3C. 24 September 2015. W3C Recommendation. URL: 
[COGA-USABLE]
. Lisa Seeman-Horwitz; Rachael Bradley Montgomery; Steve Lee; Ruoxi Ran.  W3C. 11 December 2020. W3C Working Draft. URL: 
[DPUB-ARIA-1.0]
. Matt Garrish; Tzviya Siegman; Markus Gylling; Shane McCarron.  W3C. 14 December 2017. W3C Recommendation. URL: 
[GRAPHICS-ARIA-1.0]
. Amelia Bellamy-Royds; Joanmarie Diggs; Michael Cooper.  W3C. 2 October 2018. W3C Recommendation. URL: 
[PRIVACY-PRINCIPLES]
. Robin Berjon; Jeffrey Yasskin.  W3C. 12 May 2022. W3C Group Draft Note. URL: 
[SECURITY-PRIVACY-QUESTIONNAIRE]
. Theresa O'Connor; Peter Snyder.  W3C. 23 March 2021. W3C Note. URL: 
[SOCIETAL-IMPACT-QUESTIONNAIRE]
. Amy Guy.  W3C. 13 Dec 2021. W3C Draft TAG Finding. URL: 
[SOLID-WEBSOCKETS-API]
. Nicola Greco; Dmitri Zagidulin; Ruben Verborgh.  W3C Solid Community Group. 17 June 2020. Unofficial Draft. URL: 
[UAAG20]
. James Allan; Greg Lowney; Kimberly Patch; Jeanne F Spellman.  W3C. 15 December 2015. W3C Note. URL: 
[WAI-ARIA-1.2]
. Joanmarie Diggs; James Nurthen; Michael Cooper.  W3C. 2 March 2021. W3C Candidate Recommendation. URL: 
[WCAG-3.0]
. Jeanne F Spellman; Rachael Bradley Montgomery; Shawn Lauriat; Michael Cooper.  W3C. 21 January 2021. W3C Working Draft. URL: 
[ETHICAL-WEB-PRINCIPLES]
. Daniel Appelquist; Hadley Beeman; Amy Guy.  W3C. 12 May 2022. W3C Group Draft Note. URL: 
[W3C-PROCESS]
. Elika J. Etemad / fantasai; Florian Rivoal;  W3C Process Community Group. 2 November 2021. URL: 
[WEBID-TLS]
. Henry Story; Stphane Corlosquet; Andrei Sambra.  W3C WebID Community Group. W3C Editor's Draft. URL: 



















Developers













Users










Community











































The Solid team helps coordinate the standardisation work and support those who are implementing and using Solid.
You can read more about the  which is open for suggestions around how to improve by  or sending an email to .
Sir Tim Berners-Lee
Solid Director
Sir Tim Berners-Lee is co-founder and Chief Technology Officer of Inrupt. Named one of Time Magazines 100 Most Important People of the 20th Century, Tim invented the web while at CERN in 1989. He is the Founder and Director of the World Wide Web Consortium (W3C), the international standards forum for technical development of the Web, and the Web Foundation whose mission is that the World Wide Web serves Humanity. He co-founded and is President of the Open Data Institute in London. Tim is a Professor at the Massachusetts Institute of Technology (MIT) in the Computer Science and AI Lab (CSAIL). In April 2017, Sir Tim was awarded the Turing Prize which is considered the Nobel Prize of Computing.
Editors
Editors are responsible for maintaining and reviewing suggestions to the Solid specification.
Sarven Capadisli
Solid Editor
 contributes to the advancement of technical specifications in the Solid ecosystem and aims to ensure open consensus within a common ethical framework. They have been involved in the evolution of Solid alongside TimBL at MIT since 2015.
Ruben Verborgh
Solid Editor
 focuses on ecosystem architecture and developer experience.
Justin Bingham
Solid Editor
Justin Bingham is co-founder and Chief Technology Officer of Janeiro Digital, where he and his team apply Solid to solve large-scale problems across the world. He is closely involved in the evolution of the Solid ecosystem, including data interoperability patterns, secure data boundaries, developer tooling, and frictionless end user experience.
Dmitri Zagidulin
Solid Editor
Dmitri is Senior Consulting Software Engineer at Digital Bazaar and co-founder of Ro Network. He is also the Co-Co-Chair of the Secure Data Storage Working Group at the Decentralised Identity Foundation. He was part of the MIT Solid project.
Kjetil Kjernsmo
Solid Editor
Kjetil is a Senior Advisor with the Norwegian Agency for Development Cooperation, where he works as a technical expert on normative technologies and Digital Public Goods. He has a PhD in Informatics from the University of Oslo in Norway and has 25 years of experience with social and semantic web technology.
Creators
Creators are responsible for maintaining and reviewing suggestions to solidproject.org which includes Solid content such as the newsletter This Month in Solid.
Kay Kim
Creator
Kay is a technical writer at Inrupt and a newcomer to Solid.
Kyra Assaad
Creator
Kyra Assaad is the Product Designer at Inrupt. She works to ensure that the Solid user experience is accessible and useable for all. Passionate about increasing representation and participation of women, people of colour and other under-represented groups in the Solid community, she helped form and now serves as one of the chairs of the Solid Diversity, Equity, and Inclusion (DEI) team.
Virginia Balseiro
Creator
 is a web developer and co-chair of the Solid Community Group. She has been actively involved in the Solid Project since 2020. As a founder of the Women of Solid group and a member of the Solid Team, she advocates for openness, transparency, inclusion, and positive collaboration within the Solid community. She also contributes to the development and standardization of Solid Technical Reports and guidelines as an editor.
Vincent Tunru
Creator
Vincent Tunru is a front-end engineer. He has worked at Inrupt, and before that he worked on finding out how technology can help ensuring open access to academic research. He is focusing on technical writing for app developers to learn how to build Solid apps.
Ted Thibodeau
Creator
, @TallTed, is a Technical Evangelist at , where hes been employed since December 2000. While working with internal and external users of  including , , , , , and others, he has also been contributing to a number of Identity-, RDF-, RWW-, and Linked Data-focused  and related projects, including , the , the , the , the , and several others.
Jeff Zucker
Creator
Jeff Zucker has developed software for and led projects at UNICEF, UNESCO, New York City Department for the Ageing, Columbia University, and at not-for-profit agencies internationally and in Oregon, USA.  He is the published author of books and articles on multi-cultural education, adult literacy, and the relationship of technology to society as well as a number of open source software packages.
Timea Turdean
Creator
 is a Software Engineer for Inrupt and part of .
Administrators
Administrators are responsible for administration of tools, systems, and services used for advancing Solid.
Tim Berners-Lee
Administrator
Sir Tim Berners-Lee is co-founder and Chief Technology Officer of Inrupt.
Jackson Morgan
Administrator
Jackson Morgan is a freelance Solid developer for 
Justin Bingham
Administrator
Justin Bingham is co-founder and Chief Technology Officer of Janeiro Digital
Alain Bourgeoa
Administrator
 is the maintainer of  and works on several other teams such as  and .























































What's New




























More





































Developers













Users










Community











































Got a question thats not here? Try asking on the  or the .
Definitions
What exactly is personal data?
Personal data is personal. It refers to data sets describing a person ranging from physical attributes to their preferences and behaviour. Personal data is a legal concept, not a technical concept, and it is not utilised in all jurisdictions.
More details... 
Examples of personal data include: location, genome data, written communication, spoken communication, lists of contacts, internet browsing habits, financial transactions, supermarket spending, tax payments, criminal record, laptop and mobile phone camera lens recording, device microphone recordings, driving habits via car trackers, mobile and health records, fitness activity, nutrition, substance use, heartbeat, sleep patterns and other vital signs.

In Europe  as "any information relating to an identified or identifiable natural person (data subject); an identifiable natural person is one who can be identified, directly or indirectly, in particular by reference to an identifier such as a name, an identification number, location data, an online identifier or to one or more factors specific to the physical, physiological, genetic, mental, economic, cultural or social identity of that natural person;"


What is interoperability?
According to the , interoperability is the quality of being able to be used together. For example, if you use a Solid app, you can store your data in any  because apps and Pods are interoperable. Also, you should be able to reuse data from one Solid calendar app to another because apps are interoperable.

What is a Pod?
A Pod is where data is stored on the Web with Solid. (). A user may store their data in one Pod or several Pods, and applications read and write data into the Pod depending on the authorisations granted by the user or users associated to that Pod.

What is a WebID?
A WebID is a unique identifier used to identify a specific user. An example of what a WebID could look like is: https://fulano.pod.provider/profile/card#me. To share data with a third party, a user associates sharing preferences to the WebID of that third party. Dont worry though: .

More details...
A WebID is an  that can be dereferenced as a  profile document serialized in  . In Solid, WebIDs are used to identify Agents i.e. people and organisations as well as to manage their access rights though . 

How are Pods different from WebIDs?
The two are different things: , and . They are provided by two potentially distinct entities:

The Pod Provider hosts Pods
The Identity Provider allows you to only have one account (identified by your WebID) to log into multiple apps.

To log into Solid apps and/or access data on Pods, you just have to provide your WebID and login to your Identity Provider, like Sign in with Google today. It is possible for the same company or organisation to be both a Pod Provider and a Identity Provider although they are distinct separable services that are compatible with other Pod Providers and Identity Providers (which means you are free to choose the provider that suits you the most).

More details...
An Identity Provider implements an identification protocol (e.g. ), and allows you to prove that you own the WebID.
A Pod Provider delivers storage space under one or more domains, usually (but not necessarily) pointed to by <webID> solid:storage <pod> statements included in the profile document associated to the WebID.

Web Standards
How does Solid relate to other Web standards?
Solid does not reinvent the wheel. When you use Solid you will still be able to access your data using the same Web browser on the same computer. Solid is still the web, but with a few things added and a few assumptions overturned ().
Solid adds:

An identification system so that instead of having to sign in to everything with Google or Facebook you can sign in with your favourite Solid provider and you wont be tracked.
Ubiquitous sharing control so that you can share anything with anybody no matter which social media they happen to be part of.
A sort of personal cloud storage or a A USB storage in the sky which is called a Pod.

Solid overturns assumptions:

When you start a Solid app, instead of the app storing the data itself, it stores it on your Pod. When you use the app, you choose which app to use, and you choose which Pod to use with which app.


More details
Solid is built on top of existing Web standards. The core Solid specification relies on  and  (, both being based on  and  vocabularies. Solid also uses a subset of  UPDATE through HTTP PATCH queries. Identification in Solid is based on  and/or .

Storage
Are Solid users expected to setup their own servers and self-host?
No. Self-hosting means that your data would sit at home on your own physical hard drive or server. Self-hosting is possible but not essential when using Solid, and it currently requires some technical knowledge. A Solid user can rely on an Identity Provider and a Pod Provider, and is not expected to have any particular expertise. It is also possible to self-host and become a small Identity Provider and Pod Provider, to provide Solid to your family, association, friends

More details
The Solid standard is open as are some of its implementations such as the  meaning that anyone can self-host their own Identity and Pod or the Identity and Pod of a group of users. 

Can data exist in more than one Pod?
Yes, the same data point can exist in more than one Pod. You can choose to have more than one Pod deliberately, for example for work and for home, in which case, some data may be relevant to both settings. You can also choose to have a single Pod and give selective access. Some data is relevant to multiple users so may be replicated in a slightly different way in another persons Pod. For example, if you have a conversation with someone the data may be stored in both your Pod and the Pod of the person you spoke with.
Is it possible to use Solid offline (at least partially)?
Eventually, yes. The Solid long term vision includes local first and a flexibility of different topologies of patch-passing sync networks. However, there are no implementations yet.
When I want to leave a Pod provider, can I take my data with me?
Yes, unless the Pod provider doesnt allow you to. The best way to understand the service of a particular Pod provider is to read the Terms. There are some support tools like  to help you understand the small print more easily.

More details
The data in Solid Pods is structured according to Linked Data principles by the applications writing them in the first place. Therefore, the Pod Provider is completely neutral regarding the Pod content, and the same data structure should be supported by any Pod Provider. The storage technology picked by each Pod Provider is . 


When using Solid, how is data stored?
It depends on the Pod Provider. From a user point of view, how the data is stored is not as important as how it is accessed and controlled. No matter who the Pod Provider is, in order to be Solid compliant, it has to expose data the same way: as resources in folders. However,the implementors of the standard are free to pick the underlying technologies according to their own purposes and constraints. That is why performance may vary from one Pod Provider to another.

More details
As any standard, Solid only describes the interaction model the system must be compliant with. The Pod Provider only exposes a REST read-write interface to the clients, to which the storage technology is irrelevant, as it is in most Web-based systems. How this interface binds with the storage is specific to each Pod Provider.

Identification
Can Solid help store data of an organisation, not an individual?
Yes. A WebID does not necessarily identify a single physical person: organisations and companies can get a WebID. More generally, a WebID may be used to identify a family, a team, or any group of people. Since the rights on a Pod are attached to WebIDs, Solid Pods can store data in any of these use cases with the same procedure.
I just signed up but have two profile locations, what is the difference between the two?
Solid specifications can be implemented by a variety of identity providers, Pod providers, and apps. This allows you to use services from a variety of providers and take the data along with you when you switch i.e. they are compatible.
You can find out the differences between each of the service providers by looking at their respective websites and terms and conditions.
Having two WebIDs with two different identity providers or the same identity provider is very much like having two email addresses. These WebIDs are unrelated to each other, and can have different data sharing preferences attached to them, e.g. one allowed to access your company documents, and the other your health record.
If I join Solid, can I stop using it when I want?
Yes. To leave Solid, you will need to:

Delete your Pod(s)
Delete your WebID

Each Pod Provider may offer a its own procedure to delete Pods, which means closing the storage space they rented to you. Once your Pods are deleted, you can delete your WebID by closing your account at your Identity Provider. As for Pod Providers, the exact procedure may differ from an Identity Provider to the other. Remember that you need to log in your Identity Provider to have access to your Pods: if you delete your Identity Provider account first, you may lock yourself out of your Pods.

More details
Technically, you may host your  profile independently from your Identity Provider, and have it point to a WebID you control. In this case, to fully delete your Solid identity, you may want to delete this profile document as well.

The Business Model
Will Pod providers get paid? By who?
This will be determined by the market. It is likely that several business models emerge, some where the user pays for storage, and some funded by advertising for instance, like on the current Web platforms. However, with Solid, if the terms of your Pod Provider change, or if you want to switch to an advertising-free Provider, you can do so conveniently without losing your data, such as your contacts and chat history.
If everyone used Solid would I lose my favourite internet services?
No. Search engines and communication tools do not need to track you to work. Hopefully over time all the nice things you get from silos which dont let you determine your data sharing preferences will be echoed by new solid-compatible ones which do.
The Bigger Picture
Doesnt the Data Transfer Project fix the data concerns?
The  is a great start. The next step is to build a healthy array of options for users to make their data work for themselves.
How to integrate iOS and Android apps into Solid?
It is possible for developers to take an iOS or Android app and make it Solid compatible by following the standard and supporting documentation.

More details
Currently there are no developer kits in development for Android or iOS. If you really want to have an app that can be installed on Android or iOS, you might consider writing it as a progressive web app or writing it as a hybrid app.

Arguably the Semantic Web or Linked Data never took off, so why is Solid working with it?
The  and  principles and technologies have always meant to make data more reusable, and to make data independent from applications, which is why it is at the core of Solid.

More details
The Semantic Web and Linked Data technologies are centered on the question of interoperability. By using these technologies, data is provided a context and is made more reusable. In order to achieve one of the goals of Solid and enable applications to share and reuse data without having the control over it, this kind of interoperability is key, and the Semantic Web and Linked Data principles and technologies seemed to be the fittest for this purpose. 

Does Solid use blockchain?
No. Solid is not a blockchain technology, but it can interact and use other blockchain initiatives.
Security

Does Solid mean we wont need so many passwords?
Yes. When you use Solid, you only need to login to your Identity Provider. You can then use applications that interact with your Pod without logging in each of them individually, which is (in our opinion) simpler than having to create accounts on each and every service. However, you will still have to manage what data you would like to share with each application.
Is data in my Pod safe? Is the Pod encrypted while it is stored on a providers system?
It depends on the Pod Provider. Pod providers can be Solid compliant without encrypting the data stored on the Pod providers system. If this encryption is important to you, use a Pod provider that does encrypt you data. The Solid standard describes rules for controlling access to the data, but encryption is dependant on the storage system, which is controlled by the Pod Provider.
Is my data safe when I use a Solid application?
It depends on the app. Your data is always encrypted in transit from Pod to app and vice versa. You should always be conscious about which apps you are using the terms of those apps. Solid allows you to selectively share data with specific applications.
Is data on my Pod in one physical place?
Data on your Pod is stored where you choose your Pod to be. You can either store your Pod on a Pod provider or chose to self-host. All data on a single Pod is centrally stored in the same place.
If all my data is in one place, does it not become a vulnerable target for hackers?
All of your data will not necessarily be in one place, since you can store pieces of data across several Pods. When it comes to malicious cyber attacks, an attack on a single source of many peoples data is generally more likely than on an individual level.
Can Solid prevent 3rd parties from replicating data they have legitimate access to ?
No. In Solid, the user grants permission to third-party apps to access data in his/her Pod. When said application has read access over your data, you cannot prevent it from duplicating it (which you cannot do with current applications either). What changes is that you control exactly what information the app has access to, and you can revoke this access at any time. What happens when this access right is revoked is .

When I revoke access of an application to my data, can it still hold a copy of the data it previously accessed?
Solid cannot delete the data you already sent out. As soon as you start using Solid, you will be able to be more deliberate about your data sharing preferences from that point onwards. If you revoke the access of an application to your data at any point in time, and this application previously duplicated the data it had the right to access, the copy is not destroyed. However, the application is no longer able to update this copy according to the modifications you make on your Pod.

More details
If you would like to ask for your data to be deleted from other services, In Europe there is a law called the  which makes it possible for European citizens to ask for their data to be deleted. You can find template letters and instructions on how to exercise this right . 

Apps have my data today. If I move this data to Solid, will they still have a copy ?
Yes. Today, other people and organisations have a copy of your data, but you may not. If you join Solid and move your data there, it does not prevent the apps already having your data to keep their copy. However, these apps will have to ask for your authorization to access the new data you store in Solid.
Could the Solid technology be a tool to trace or control criminal actions?
The law determines the remit of the government to track or control criminal action. The users choice of where to store their Pod would determine which jurisdiction had oversight of the data in that Pod. Expect if the user is based in Europe, in which case the General Data Protection Regulation applies regardless of where the Pod is stored.
As a Pod provider are you legally responsible for the data you are storing?
Pod providers have commitments to the individuals and legal entities that they provide services to based on the law of the countries in which the hosting provider is operating. As a Pod provider you should seek professional advice on how to be compliant. As an individual Solid user, you should carefully read the agreement with your hosting provider before agreeing.
Could Solid become another tech giant monopoly?
No. Solid is not a company, it is an open standard. Could it dominate the technical landscape, by being adopted by many? Yes, that would be ideal, so we would have one interoperable Solid web, not many. However, being compliant with Solid does not require developers to ask permission from anyone before building their applications, and does not prevent users from choosing the apps they want, and share their data how they see fit. In that sense, Solid cannot become a monopoly, in the same way that the Web is not considered a tech monopoly.
Could a Solid app or Pod become another tech giant monopoly?
No. Although an app or Pod could become very popular, with Solid, it is always possible for users to leave to another competitor app or Pod. People want different things so it is unlikely that one size will fit all.
Is it opt-in or opt-out to share my data when using Solid?
Opt-in. The default is for you not to share your data. You have to give your active consent to share your data.
What if I dont want to share my data at all?
Solid makes sure that the minimum amount of data is shared while still providing you with services. Some services do need to know something about you to be able to function, for example, to send you a product the company will need to know where to send that product to. If you dont want to share your data with these services, you may not be able to use them.
Due to the nature of access control in Solid, if you dont want to allow any app to access any piece of data on your Pod, you can do just that. If you dont want a certain app to read data on your Pod, you can not give it any access right. However, it would still be allowed to read the public data on your Pod (if any is available).
Who controls the data of a child using Solid?
The child. The parents or guardians of a child are responsible for managing the data sharing preferences of the child until they reach the legal age of consent in their country of location.
If I use Solid, who controls my data when I die?
You decide based on your will and your agreement with any hosting provider and app you have been using.
Why do we need Solid when we already have laws for data protection?
Data protection laws in a nutshell tend to promote transparency around data use and insist on informed explicit consent from the user. Solid provides a tools to make this possible.
Isnt having free Web services a good exchange for giving access to my data?
Thats up to you, Solid just gives you the choice.
Is it wise to trust people to make ethical decisions on such a complicated issue?
There is a lot of variation in what people feel to be right and wrong, and ultimately it is down to you to decide what to do with your data. Solid does try to help you make informed choices by providing relevant information and by constantly validating the accuracy of that information.
Are apps vulnerable to an Origin bypass?
The Solid specification  that the trusted apps feature is new and experimental, as it is known that  has the common weakness () of origin validation.
Currently when a user gives a Solid web app access to their Pod, the app Origin is added to that users list of trusted apps. The app then receives a token that allows it to interact with the Pod on behalf of the user, and only the Origin included with those interactions is verified using the list of trusted apps.
Although standard browsers automatically include the Origin when they send HTTPS requests, a non-browser client is not required to send one. This means anyone with access to the aforementioned Origin-based token can use non-browser clients to bypass Origin validation for the Pod.
Solutions already are planned to revise and replace this experimental use of Origin, in order to evolve security of the trusted app feature.




















































































































What's New




























More





































Developers













Users










Community









































Terms of Use
URI Persistence Policy
Last modified: 2021-01-25
When information is made available on the Web, it is important for the integrity of the Web, and the society based upon it, that the URIs used to reference information be used well into the future, and that the information persist as identified.
To this end, the Solid Project hosts make the following pledge: that as far as they are able, for resources on the solidproject.org Web site which are declared (see below) to be persistent.
Pledge:

The hosts will ensure that persistent resources continue to be available throughout the life of the Solid Project;
Where a persistent resource is modified, a change history will be archived though the archive will not necessarily be available publicly;
Should the Solid Project be disbanded, then any Web site will be granted the right to make a copy (at a different URI) of all public persistent resources so long as they are not modified and are preserved in their entirety and made available free of charge, and provided the same persistence policy is applied to these historical mirrors. In such event, the original https://solidproject.org web site will be handed over for management to another organization only if that organization pledges to this policy or one considered more persistent.

As of this note, persistent resources include:

The home page https://solidproject.org/;
Those which start https://solidproject.org/ immediately followed by four decimal digits;
Those which start https://solidproject.org/TR/ immediately followed by four decimal digits.

No representation is made about the persistence policies for any other information on the site.
The intent is to set an example by reducing the failure of links due to clumsy management or inadequate commitment to information persistence, and to provide a stable reference base of information about Solid-related topics as a service to the community.
Solid Project
2021-01-25








































What's New




























More





































Developers













Users










Community












































Developer Resources
Tutorials and guides to get you started developing Solid applications.





If you provide your own Solid libraries, feel free to contribute your own
tutorials to demonstrate how to use them.
Please dont hesitate to share applications you develop with the community 
.




























































What's New




























More





































Developers













Users










Community











































Specification
The Solid Specification consists of several , each of which is edited by a 
.
Contributing to the specification


    Before contributing, please read the 
     
    and the . 
    Join the 
    before providing substantial contributions.
    Note that Solid encourages adherence to the W3C's 
    , 
    in particular the .
  

Anyone can contribute by filing an  
or by submitting .
Present your proposals via the most relevant meetings 
and communication channels:


Submit new User Stories to 
the  
repository. They are tagged according to the aspects of Solid 
that are relevant to them, so that specification panels can easily 
find them for the work items at hand.


Help formulate Use Cases and Requirements (UCR) based on the User Stories for each TR:



Upcoming: WebID-Profile UCR (,
)

All Solid UCRs are reviewed by the Diversity, Equity, and Inclusion Team 
().


Join the Solid 
to listen, provide insight or suggest topics for discussion. 
Meeting schedules, agendas and minutes can be found on the GitHub 
pages of each panel. 
Please read the 

before calling in.


More details on how to contribute can be found .
All proposals undergo an Editorial review process. For more information
on proposal submissions and reviews, see the 
.
Tracking Progress
Keep up-to-date with specification progress by signing up for
.
Minutes of meetings are kept by each  to track ongoing discussions.























































What's New




























More





































Developers













Users










Community











































 is co-licensed under the MIT license and the Creative Commons Attribution 4.0 International (CC BY 4.0) license to cover both code and copy respectively. The individual licensors of each repository are mentioned in both the license.md of each repo as well as in the overview table below.
The Solid Logo is under the CC-BY 4.0 license and was designed by Guillaume Baudusseau.














































What's New




























More





































Developers













Users










Community











































Introduction
These guidelines are to help you when representing the Solid brand in apps, communications, content, events, projects or assets. They incorporate guidance for visual elements such as logos, colours, typography, iconography and graphic devices. There is also guidance for writing such as tone and format. These guidelines are intended for digital application.
Why do we need brand guidelines?
As a defined entity, Solid has an identity. The more consistent that identity is the easier it is to be identified and identify with. While the Solid brand may appear in a range of different places for very different purposes, by following these guidelines you will be helping to retain that consistency and build a stronger identity.
For app developers
Please use these guidelines for any instances where you are looking to reference Solid. In particular, please pay notice to the guidelines on logo and colour usage as well as how to refer to Solid and its key elements in text.
For event organisers or communications/content creators
If you are looking to create Solid communications, collateral or content please follow all aspects of these guidelines.
___
Values
Solid has core values that should be embodied in everything that it represents or represents it: Interoperability, Self-determination, Equal access, Sourcing, Public Value, Connecting
Logo
There is one single Solid logo with two different applications:

Contained
Lettermark within a solid hex shape
Usage: can be used on any flat colour or overlaid on an image. Not to be used on complex patterns or in close proximity to other logos, typography or graphic elements.
Outlined
Lettermark within an outline hex shape
Usage: only to be used on solid Royal Lavender (#7C4DFF) background. Not to be used in close proximity to other logos, typography or graphic elements.
___
Colour
Primary
Royal Lavender - #7C4DFF, R124 G77 B255
Usage: in conjunction with outlined Solid logo as a key branding element e.g. mastheads, footers and for primary CTA buttons. Not to be used as a fill within Avoid using numerous times in any one environment.
Secondary
Geyser Grey - #DAE0E6, R218 G224 B230
Usage: core functionality and signposting e.g. icons and secondary buttons/controls. Avoid use in content.
Tertiary
Calatina Blue - #083575, R8 G53 B117
Usage: for background fills, UI functionality, dividers, illustration
Flamengo Pink - #FF6969, R255 G105 B105
Usage: for background fills and illustration.
Utility colours
Header Blue - #354866, R53 G72 B102
Usage: all non header copy. Avoid using for anything else.
Body Grey - #666666, R102 G102 B102
Usage: all non header copy. Avoid using for anything else.
Warning Orange - #FFA600, R255 G166 B0
Usage: for warning messages only
Error Red - #D0021B, R208 G2 B27
Usage: for error messaging only
___
Typography
The Solid brand features two typefaces:
Volkhov
Usage: headlines, sub headlines, buttons, pull quotes
Neue Einstellung
Usage: body copy, links, controls, labels
___
Iconography
Solid uses icons provided by . This is not only for ease but also to ensure icons are as usable/accessible as possible.
___
Gradients
Solid has one gradient which combines the Primary (Royal Lavender) and Secondary (Deep Sky Blue, Cerulean Blue) colours in equal parts (33/33/33)
Usage: as a background or as an overlay to a greyscale image. It should not be used in the logo, typography, icons or graphics.
___
Graphic elements
Solid hex pattern
Usage: only to be used as an unbroken background fill and not to be incorporated into content or graphics.
___
Written tone
When writing for Solid communications or content you should look to adhere to the following tone of voice principles:
Clear
Being instantly understood by anyone, be they technically-minded or not, is fundamental to ensuring Solid meets its core values (see above). This means describing things in terms everyone will understand and avoiding jargon or ambiguous abbreviation/acronyms. Any  terminology which isnt in the vocabulary of the majority of people.
Honest
Being true to what anything is and what it delivers is key to ensuring Solid always remains genuine and trustworthy. Avoid using any embellishment or describing Solid in excessively glowing terms. Accuracy of information is also key to achieving this and the integrity of what Solid says should be protected at all times. Solid should be candid with the truth but at the same time avoid being frank or outspoken.
Open
Solid should always be welcoming and approachable in its tone and language - anyone should be made to feel like they can be part of the community. It should always be generous with what it shares and never feel like it is withholding information. Solid should avoid doctrine and being overly-directive in favour of offering guidance and advice.
___
Written format
Solid and Pod should always be always be capitalised and never written in all-caps.
WebID is semi-capitalised.
General writing should always be sentence case and avoid all non-standard capitalisation. For example, internet and web are decapitalised .
British spelling, the serial comma, and the generic they is used to specify a person of unknown gender on the website copy and mailing list.













































































What's New




























More




























